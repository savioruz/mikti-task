package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"fmt"

	"github.com/savioruz/mikti-task/tree/week-4/internal/delivery/graph"
	"github.com/savioruz/mikti-task/tree/week-4/internal/domain/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.TodoCreateRequest) (*model.TodoResponse, error) {
	return r.TodoUsecase.Create(ctx, &input)
}

// UpdateTodo is the resolver for the updateTodo field.
func (r *mutationResolver) UpdateTodo(ctx context.Context, id string, input model.TodoUpdateRequest) (*model.TodoResponse, error) {
	u, err := r.TodoUsecase.Update(ctx, &model.TodoUpdateIDRequest{ID: id}, &input)
	if err != nil {
		return nil, err
	}

	return u, nil
}

// DeleteTodo is the resolver for the deleteTodo field.
func (r *mutationResolver) DeleteTodo(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteTodo - deleteTodo"))
}

// Todo is the resolver for the todo field.
func (r *queryResolver) Todo(ctx context.Context, id string) (*model.TodoResponse, error) {
	return r.TodoUsecase.Get(ctx, &model.TodoGetRequest{ID: id})
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context, page *int, size *int) ([]*model.TodoResponse, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
